/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Dash {
            bindings = <&kp MINUS>;
            key-positions = <27 28>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <27 28 29>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <27 29>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Equals {
            bindings = <&kp KP_EQUAL>;
            key-positions = <28 29>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 27>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Colon {
            bindings = <&kp COLON>;
            key-positions = <19 28>;
            require-prior-idle-ms = <100>;
            layers = <0 1>;
        };

        Mute {
            bindings = <&kp C_MUTE>;
            key-positions = <25 26>;
            layers = <2>;
            require-prior-idle-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
  &kp Q        &kp W        &kp E       &kp R       &kp T  &kp Y  &kp U      &kp I           &kp O          &kp P
  &kp A        &kp S        &kp D       &kp F       &kp G  &kp H  &kp J      &kp K           &kp L          &kp SINGLE_QUOTE
  &mt LSHFT Z  &hm LCTRL X  &hm LALT C  &kp V       &kp B  &kp N  &kp M      &hm RALT COMMA  &hm RCTRL DOT  &mt RSHFT SLASH
                            &kp LGUI    &lt 1 BSPC                &kp SPACE  &mo 2
            >;
        };

        num_sym {
            bindings = <
  &kp N1   &kp N2     &kp N3      &kp N4      &kp N5                &kp N6                 &kp N7     &kp N8     &kp N9        &kp N0
  &kp TAB  &kp TILDE  &kp ESCAPE  &kp RETURN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT   &kp DOWN   &kp UP_ARROW  &kp RIGHT
  &trans   &trans     &trans      &kp DELETE  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp MINUS  &kp EQUAL  &trans        &trans
                      &trans      &trans                                                   &trans     &trans
            >;
        };

        kb_functions {
            bindings = <
  &kp F1  &kp F2  &kp F3  &kp F4                &kp F5                &kp F6        &kp F7            &kp F8  &kp F9  &kp F10
  &trans  &trans  &trans  &trans                &trans                &trans        &trans            &trans  &trans  &mo 3
  &trans  &trans  &trans  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOL_DN  &kp C_VOLUME_UP   &trans  &trans  &trans
                  &trans  &trans                                                    &kp C_PLAY_PAUSE  &trans
            >;
        };

        misc {
            bindings = <
  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &bootloader  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                       &trans  &trans                  &trans  &trans
            >;
        };
    };
};
